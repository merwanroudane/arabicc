import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib

matplotlib.rcParams['font.family'] = 'Arial'

# Set Streamlit page configuration
st.set_page_config(
	page_title="ุงูููุงุฐุฌ ุงูููุงุณูุฉ ุงูุฃูุซุฑ ุดูุฑุฉ ุนุฑุจูุง",
	page_icon="๐",
	layout="wide",
	initial_sidebar_state="expanded"
)

# Apply basic RTL styling
st.markdown("""
<style>
    /* Basic RTL direction for layout */
    * {
        direction: rtl;
    }
    .main .block-container, h1, h2, h3, h4, h5, h6, p, div {
        direction: rtl;
        text-align: right;
    }
    .katex-display {
        direction: ltr !important;
    }
</style>
""", unsafe_allow_html=True)


# Main title
st.markdown("# ุงูููุงุฐุฌ ุงูููุงุณูุฉ ุงูุฃูุซุฑ ุดูุฑุฉ ุนุฑุจูุงู")
st.markdown("### ุฅุนุฏุงุฏ: Merwan Roudane")

# Sidebar
st.sidebar.markdown("### ูุงุฆูุฉ ุงูููุงุฐุฌ")
options = [
	"ุงูุฑุฆูุณูุฉ",
	"ูููุฐุฌ ุงูุงูุญุฏุงุฑ ุงูุฎุทู ููุฑูุนู",
	"ูููุฐุฌ ุงูุงูุญุฏุงุฑ ุงูููู",
	"ูููุฐุฌ ุงููุนุงุฏูุงุช ุงูุขููุฉ",
	"ูููุฐุฌ VAR",
	"ูููุฐุฌ VECM",
	"ูููุฐุฌ ARDL",
	"ูููุฐุฌ NARDL",
	"ููุงุฐุฌ ุงูุจุงูู ุงูุฏููุงููููุฉ",
	"ููุงุฐุฌ ุงูุจุงูู ุงูุณุงููุฉ",
	"ุงููุชูุงูุถุงุช ูู ุงูุฏุฑุงุณุงุช ุงูุนุฑุจูุฉ",
	"ููุงุญุธุงุช ุนุงูุฉ"
]
choice = st.sidebar.radio("ุงุฎุชุฑ ุงููููุฐุฌ:", options)

# Additional info in the sidebar
st.sidebar.markdown("---")
st.sidebar.info("ูุฐุง ุงููุฎุทุท ูุชูุงูู ุฃูู ุงูููุงุฐุฌ ุงูุชูุณูุฑูุฉ ูู ุงูุฏุฑุงุณุงุช ุงูุนุฑุจูุฉ ูููุณุช ุงูุชูุจุคูุฉ")
st.sidebar.info("ุงูุดุฑูุท ุงููุฐููุฑุฉ ูู ุจุตูุฉ ุนุงูุฉ ูููุณุช ููุตูุฉ ุญูุซ ุชุญุชุงุฌ ุงูุดุฑูุท ุงูููุตูุฉ ุฅูู ูุฎุทุท ููู ูููุฐุฌ ุนูู ุญุฏู")


# Function to create a model tree graph
def create_model_tree():
	fig = go.Figure()

	models = [
		"ููุงุฐุฌ ุงูุงูุญุฏุงุฑ ุงูุฎุทู", "ููุงุฐุฌ ุงูุงูุญุฏุงุฑ ุงูููู", "ููุงุฐุฌ ุงููุนุงุฏูุงุช ุงูุขููุฉ",
		"ูููุฐุฌ VAR", "ูููุฐุฌ VECM", "ูููุฐุฌ ARDL", "ูููุฐุฌ NARDL",
		"ููุงุฐุฌ ุงูุจุงูู ุงูุฏููุงููููุฉ", "ููุงุฐุฌ ุงูุจุงูู ุงูุณุงููุฉ"
	]

	x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
	y = [3, 2, 3, 1, 1, 2, 2, 3, 3]

	# Add nodes
	fig.add_trace(go.Scatter(
		x=x, y=y,
		mode='markers+text',
		marker=dict(size=20, color=['#3a506b'] * len(models)),
		text=models,
		textposition="top center",
		textfont=dict(size=14, color='black', family='Arial'),
		hoverinfo='text'
	))

	# Add connecting lines
	fig.add_shape(type="line", x0=1, y0=3, x1=3, y1=3, line=dict(color="#718096", width=2))
	fig.add_shape(type="line", x0=4, y0=1, x1=7, y1=1, line=dict(color="#718096", width=2))
	fig.add_shape(type="line", x0=8, y0=3, x1=9, y1=3, line=dict(color="#718096", width=2))

	# Format graph
	fig.update_layout(
		title={
			'text': "ุชุฑุงุจุท ุงูููุงุฐุฌ ุงูููุงุณูุฉ",
			'y': 0.95,
			'x': 0.5,
			'xanchor': 'center',
			'yanchor': 'top',
			'font': dict(size=24)
		},
		xaxis=dict(
			showticklabels=False,
			showgrid=False,
			zeroline=False,
		),
		yaxis=dict(
			showticklabels=False,
			showgrid=False,
			zeroline=False,
		),
		showlegend=False,
		height=500,
		plot_bgcolor='#f9f9f9',
	)

	return fig


# Function to create a conditions comparison graph
def create_conditions_comparison():
	categories = ['ุงุณุชูุฑุงุฑูุฉ ุงูุจูุงูุงุช', 'ุญุฌู ุงูุนููุฉ', 'ุงูุชูุฒูุน ุงูุทุจูุนู', 'ูุดุงูู ุงูุชูุตูู', 'ุงูุนูุงูุฉ ุงูุณุจุจูุฉ']

	models = ['ARDL', 'VAR', 'VECM', 'ููุงุฐุฌ ุงูุจุงูู']
	values = [
		[3, 3, 2, 4, 5],  # ARDL
		[5, 4, 3, 3, 5],  # VAR
		[5, 4, 2, 3, 5],  # VECM
		[4, 5, 2, 4, 3],  # Panel Models
	]

	fig = go.Figure()

	for i, model in enumerate(models):
		fig.add_trace(go.Scatterpolar(
			r=values[i],
			theta=categories,
			fill='toself',
			name=model
		))

	fig.update_layout(
		polar=dict(
			radialaxis=dict(
				visible=True,
				range=[0, 5]
			)
		),
		showlegend=True,
		title={
			'text': "ููุงุฑูุฉ ุดุฑูุท ุงูููุงุฐุฌ ุงูููุงุณูุฉ",
			'y': 0.95,
			'x': 0.5,
			'xanchor': 'center',
			'yanchor': 'top',
			'font': dict(size=24)
		},
		height=500
	)

	return fig


# Home Page
if choice == "ุงูุฑุฆูุณูุฉ":
	st.markdown("## ููุฏูุฉ ุนู ุงูููุงุฐุฌ ุงูููุงุณูุฉ ุงูุดุงุฆุนุฉ ุงูุงุณุชุฎุฏุงู ุนุฑุจูุงู")

	st.info(
		"ุชูุฏู ูุฐู ุงููุซููุฉ ุนุฑุถุงู ููููุงุฐุฌ ุงูููุงุณูุฉ ุงูุฃูุซุฑ ุดููุนุงู ูู ุงูุฏุฑุงุณุงุช ุงูุนุฑุจูุฉ ูุน ุชูุถูุญ ุงูุดุฑูุท ุงูุฃุณุงุณูุฉ ูุงุณุชุฎุฏุงููุง. ุชุดูู ูุฐู ุงูููุงุฐุฌ ุฃููุงุนุงู ูุฎุชููุฉ ูู ุชุญููู ุงูุงูุญุฏุงุฑุ ูููุงุฐุฌ ุงููุนุงุฏูุงุช ุงูุขููุฉุ ูููุงุฐุฌ ุงูุณูุงุณู ุงูุฒูููุฉุ ูููุงุฐุฌ ุงูุจุงูู."
	)

	st.plotly_chart(create_model_tree(), use_container_width=True)
	st.plotly_chart(create_conditions_comparison(), use_container_width=True)

	st.markdown("""
    ### ุฃูููุฉ ุงุฎุชูุงุฑ ุงููููุฐุฌ ุงูููุงุณุจ
    ูุนุชูุฏ ุงุฎุชูุงุฑ ุงููููุฐุฌ ุงูููุงุณุจ ุนูู ุนุฏุฉ ุนูุงูู ุฃูููุง:
    - ูุฏู ุงูุฏุฑุงุณุฉ (ุชูุณูุฑู ุฃู ุชูุจุคู)
    - ุทุจูุนุฉ ุงูุจูุงูุงุช (ููุทุนูุฉุ ุณูุงุณู ุฒูููุฉุ ุจูุงูุงุช ุจุงูู)
    - ุฎุตุงุฆุต ุงููุชุบูุฑุงุช (ุงุณุชูุฑุงุฑูุฉุ ุชูุฒูุนุ ุฅูุฎ)
    - ุงูุนูุงูุฉ ุจูู ุงููุชุบูุฑุงุช (ุฃุญุงุฏูุฉ ุงูุงุชุฌุงูุ ุชุจุงุฏููุฉ)
    """)

# Linear Regression Model
elif choice == "ูููุฐุฌ ุงูุงูุญุฏุงุฑ ุงูุฎุทู ููุฑูุนู":
	st.header("ูููุฐุฌ ุงูุงูุญุฏุงุฑ ุงูุฎุทู ููุฑูุนู")

	col1, col2 = st.columns([2, 1])

	with col1:
		st.markdown("""
        ### ุงููุฏู ูู ุงููููุฐุฌ
        ุฏุฑุงุณุฉ ุงูุฃุซุฑ ุงููุจุงุดุฑ ูููุชุบูุฑุงุช ุงููุณุชููุฉ ุนูู ุงููุชุบูุฑ ุงูุชุงุจุน.

        ### ุงูุดุฑูุท ุงูุฃุณุงุณูุฉ
        - ุงููุชุบูุฑ ุงูุชุงุจุน ูููู continuous ููุชุจุน ุงูุชูุฒูุน ุงูุทุจูุนู
        - ูู ุงูููุฐุฌุฉ ุงูุชูููุฏูุฉุ ูููู ุญุฌู ุงูุนููุฉ ุฃูุจุฑ ูู ุนุฏุฏ ุงููุชุบูุฑุงุช ุงููุณุชููุฉ ุจูุซูุฑ
        - ูู ุงูููุฐุฌุฉ ุงูุญุฏูุซุฉุ ูุง ูุดุชุฑุท ูุฐุง ุงูุดุฑุท
        - ุบูุงุจ ูุดุงูู ุงูุชูุตูู
        - ุทุฑููุฉ ุงูุชูุฏูุฑ OLS ุชุชุทูุจ ุงูุชุญูู ูู ุงููุฑุถูุงุช ุงูููุงุณูููุฉ

        ### ุงูุตูุบุฉ ุงูุฑูุงุถูุฉ
        """)

		st.latex(r"Y_i = \beta_0 + \beta_1 X_{1i} + \beta_2 X_{2i} + ... + \beta_k X_{ki} + \varepsilon_i")

		st.markdown("""
        ### ุงูุจุฏุงุฆู ูู ุญุงูุงุช ุฎุงุตุฉ
        - ูู ูุฌูุฏ ุงูุชูุงุก ูู ุฌูุฉ ุงููููู ูููุชุบูุฑ ุงูุชุงุจุน: ุงุณุชุฎุฏุงู Gamma regression ุฃู Quantile regression
        - ูู ูุฌูุฏ ุงูุชูุงุก ูู ุฌูุฉ ุงููุณุงุฑ ูููุชุบูุฑ ุงูุชุงุจุน: ุงุณุชุฎุฏุงู Skewed regression ุฃู Quantile regression
        - ูู ุญุงูุฉ ูุฌูุฏ ููุงุท ุดุงุฐุฉ: ุงุณุชุฎุฏุงู Robust regression
        - ูู ุญุงูุฉ ุงููุชุบูุฑ ุงูุชุงุจุน ุนุจุงุฑุฉ ุนู count variable: ุงุณุชุฎุฏุงู ููุงุฐุฌ ูุซู Poissonุ Binomial
        - ูู ุญุงูุฉ ุงููุชุบูุฑ ุงูุชุงุจุน ุนุจุงุฑุฉ ุนู ูุชุบูุฑ ุซูุงุฆู: ุงุณุชุฎุฏุงู ููุงุฐุฌ ูุซู Logisticุ Probit
        - ูู ุญุงูุฉ ุงููุชุบูุฑ ุงูุชุงุจุน ุนุจุงุฑุฉ ุนู ูุฆุงุช: ุงุณุชุฎุฏุงู Categorical regression
        - ูู ุญุงูุฉ ุงููุชุบูุฑ ุงูุชุงุจุน ุนุจุงุฑุฉ ุนู ูุฌุงู ูุญุฏุฏ: ุงุณุชุฎุฏุงู Interval-valued regression
        """)

	with col2:
		# Visualization
		fig = go.Figure()
		np.random.seed(42)
		x = np.linspace(0, 10, 100)
		y = 2 * x + 1 + np.random.normal(0, 2, 100)
		fig.add_trace(go.Scatter(x=x, y=y, mode='markers', name='ุงูุจูุงูุงุช', marker=dict(color='#3a506b', size=8)))
		coef = np.polyfit(x, y, 1)
		line = coef[0] * x + coef[1]
		fig.add_trace(go.Scatter(x=x, y=line, mode='lines', name='ุฎุท ุงูุงูุญุฏุงุฑ', line=dict(color='#f05454', width=3)))
		fig.update_layout(title="ูุซุงู ุนูู ุงูุงูุญุฏุงุฑ ุงูุฎุทู ุงูุจุณูุท", xaxis_title="ุงููุชุบูุฑ ุงููุณุชูู", yaxis_title="ุงููุชุบูุฑ ุงูุชุงุจุน", legend_title="ุงูุจูุงูุงุช", height=400)
		st.plotly_chart(fig, use_container_width=True)

		# Code Example
		st.markdown("### ูุซุงู ุนูู ุจููุฉ ูููุฐุฌ ุงูุงูุญุฏุงุฑ ุงููุชุนุฏุฏ")
		code = """
        import statsmodels.api as sm
        import pandas as pd

        # Load data
        df = pd.read_csv('data.csv')

        # Define variables
        X = df[['x1', 'x2', 'x3']]
        X = sm.add_constant(X)
        y = df['y']

        # Fit model
        model = sm.OLS(y, X).fit()

        # Print summary
        print(model.summary())
        """
		st.code(code, language='python')

# Quantile Regression Model
elif choice == "ูููุฐุฌ ุงูุงูุญุฏุงุฑ ุงูููู":
	st.header("ูููุฐุฌ ุงูุงูุญุฏุงุฑ ุงูููู (Quantile Regression)")

	col1, col2 = st.columns([2, 1])

	with col1:
		st.markdown("""
        ### ุงููุฏู ูู ุงููููุฐุฌ
        - ุชูุฏูุฑ ุฃุซุฑ ุงููุชุบูุฑ ุงููุณุชูู ุนูู ูุฎุชูู quantiles ูููุชุบูุฑ ุงูุชุงุจุน
        - ุงูุจุญุซ ุนู ุงูุฃุซุฑ ุบูุฑ ุงููุชูุงุซู ูุชุฃุซูุฑ ุงููุชุบูุฑ ุงููุณุชูู ุนูู ุงููุชุบูุฑ ุงูุชุงุจุน ุนูุฏ ูุฎุชูู ุฑุชุจ quantile

        ### ุงูุดุฑูุท ูุงูุฎุตุงุฆุต
        - ูุณุชุฎุฏู ูู ุญุงูุฉ ูุฌูุฏ ููุงุท ุดุงุฐุฉ ูุงูุชูุงุก ูู ุงููุชุบูุฑ ุงูุชุงุจุน ูุญุชู ูู ุงููุชุบูุฑุงุช ุงููุณุชููุฉ
        - ููุงุณุจ ุนูุฏ ูุฌูุฏ ุงุฎุชูุงูุงุช ููุฑููุงุช ุจูู ููู ุงููุชุบูุฑ ุงูุชุงุจุน ุฏุงุฎู ุงูุนููุฉ (ูุซู ูุชุบูุฑ ุงูุฃุฌูุฑ ุฃู ุงูุซุฑูุฉ)
        - ูุณุชุฎุฏู ุนูุฏ ุนุฏู ุงูุชูุฒูุน ุงูุทุจูุนู ููุจูุงูู ูู ุงูุงูุญุฏุงุฑ ุงูุนุงุฏู
        - ููุงุณุจ ุนูุฏ ุงูุฑุบุจุฉ ูู ุงูุญุตูู ุนูู ุชูุณูุฑุงุช ูุง ุชุชุนูู ุจุงููุชูุณุท

        ### ุงูุตูุบุฉ ุงูุฑูุงุถูุฉ
        """)
		st.latex(r"Q_{Y}(\tau|X) = \beta_0(\tau) + \beta_1(\tau) X_1 + \beta_2(\tau) X_2 + ... + \beta_k(\tau) X_k")
		st.markdown("ุญูุซ ฯ ูู ุฑุชุจุฉ ุงููููุฉ (quantile) ุงูุชู ููุชู ุจูุงุ ูุชุชุฑุงูุญ ูู 0 ุฅูู 1.")
		st.markdown("""
        ### ุชูุฑุนุงุช ูุฐุง ุงููููุฐุฌ
        - **Quantile in Quantile Regression:** ูููุฐุฌ ุฃูุซุฑ ูุฑููุฉ ูุณูุญ ุจุฏุฑุงุณุฉ ุงูุนูุงูุฉ ุจูู ุงููููุงุช ูููุชุบูุฑุงุช ุงููุณุชููุฉ ูุงูุชุงุจุนุฉ

        ### ููุฒุงุช ุงุณุชุฎุฏุงู ุงูุงูุญุฏุงุฑ ุงูููู
        - ุฃูู ุชุฃุซุฑุงู ุจุงูููู ุงููุชุทุฑูุฉ ููุงุฑูุฉ ุจุงูุงูุญุฏุงุฑ ุงูุนุงุฏู
        - ูุณูุญ ุจุชุญููู ุชุฃุซูุฑ ุงููุชุบูุฑุงุช ุงููุณุชููุฉ ุนูู ูุงูู ุชูุฒูุน ุงููุชุบูุฑ ุงูุชุงุจุน ูููุณ ููุท ุนูู ูุชูุณุทู
        - ูุง ูุชุทูุจ ุงูุชุฑุงุถุงุช ูููุฉ ุญูู ุชูุฒูุน ุงูุจูุงูู
        """)

	with col2:
		# Visualization
		np.random.seed(42)
		x = np.linspace(0, 10, 200)
		y = 2 * x + 1 + np.random.exponential(scale=2, size=200)
		q_25 = 2 * x + 0.2
		q_50 = 2 * x + 1
		q_75 = 2 * x + 2.5
		fig = go.Figure()
		fig.add_trace(go.Scatter(x=x, y=y, mode='markers', name='ุงูุจูุงูุงุช', marker=dict(color='#3a506b', size=6, opacity=0.7)))
		fig.add_trace(go.Scatter(x=x, y=q_25, mode='lines', name='ุงููููุฉ 0.25', line=dict(color='#f05454', width=2)))
		fig.add_trace(go.Scatter(x=x, y=q_50, mode='lines', name='ุงููููุฉ 0.50 (ุงููุณูุท)', line=dict(color='#30475e', width=2)))
		fig.add_trace(go.Scatter(x=x, y=q_75, mode='lines', name='ุงููููุฉ 0.75', line=dict(color='#7b68ee', width=2)))
		fig.update_layout(title="ูุซุงู ุนูู ุงูุงูุญุฏุงุฑ ุงูููู", xaxis_title="ุงููุชุบูุฑ ุงููุณุชูู", yaxis_title="ุงููุชุบูุฑ ุงูุชุงุจุน", legend_title="ุงูุจูุงูุงุช ูุงููููุงุช", height=400)
		st.plotly_chart(fig, use_container_width=True)

		# Code Example
		st.markdown("### ูุซุงู ุนูู ุชุทุจูู ุงูุงูุญุฏุงุฑ ุงูููู")
		code = """
        import statsmodels.formula.api as smf
        import pandas as pd

        # Load data
        df = pd.read_csv('data.csv')

        # Fit quantile regression models
        q_25 = smf.quantreg('y ~ x1 + x2', df).fit(q=0.25)
        q_50 = smf.quantreg('y ~ x1 + x2', df).fit(q=0.50)
        q_75 = smf.quantreg('y ~ x1 + x2', df).fit(q=0.75)

        # Print summary for the median
        print(q_50.summary())
        """
		st.code(code, language='python')

# Simultaneous Equations Model
elif choice == "ูููุฐุฌ ุงููุนุงุฏูุงุช ุงูุขููุฉ":
	st.header("ูููุฐุฌ ุงููุนุงุฏูุงุช ุงูุขููุฉ (Simultaneous Equations)")

	col1, col2 = st.columns([2, 1])

	with col1:
		st.markdown("""
        ### ุงููุฏู ูู ุงููููุฐุฌ
        ุฏุฑุงุณุฉ ุงูุนูุงูุงุช ุงููุชุดุงุจูุฉ ุจูู ุงููุชุบูุฑุงุช ูุชุฃุซูุฑูุง ุงูุขูู. ุญูุซ ูููู ูููุชุบูุฑ ุฃู ูููู ูุณุชููุงู ูู ูุนุงุฏูุฉ ูุชุงุจุนุงู ูู ูุนุงุฏูุฉ ุฃุฎุฑู.

        ### ุงูุดุฑูุท ุงูุฃุณุงุณูุฉ
        - ูุฌูุฏ ุฎุงุตูุฉ Simultaneity ุฃู ุงููุชุบูุฑ ุงููุณุชูู ูู ุงููุนุงุฏูุฉ ุงูุฃููู ูุตุจุญ ูุชุบูุฑ ุชุงุจุน ูู ุงููุนุงุฏูุฉ ุงูุซุงููุฉ
        - ุชุญูู ุดุฑุท Order and Rank Conditions for Identification

        ### ููุงุญุธุงุช ูููุฉ
        - ูู ุญุงูุฉ ุงุณุชุฎุฏุงู ูุฐุง ุงููููุฐุฌ ุนูู ุงูุณูุงุณู ุงูุฒูููุฉ ุบูุฑ ุงููุณุชูุฑุฉ ููู ุทุฑู ุงูุชูุฏูุฑ ุงููุนุฑููุฉุ ูุฅู Estimators ุชููุฏ ุงูููุงุกุฉ (efficiency)
        - ูู ุญุงูุฉ ูุชุบูุฑุงุช ุบูุฑ ูุณุชูุฑุฉ ููุชูุงููุฉุ ูุณุชุฎุฏู ูููุฌูุฉ Hisao 1997

        ### ุงูุตูุบุฉ ุงูุฑูุงุถูุฉ ููุธุงู ุงููุนุงุฏูุงุช ุงูุขููุฉ
        """)
		st.latex(r"""
        \begin{align}
        Y_1 &= \beta_{10} + \beta_{12}Y_2 + \gamma_{11}X_1 + \gamma_{12}X_2 + \varepsilon_1 \\
        Y_2 &= \beta_{20} + \beta_{21}Y_1 + \gamma_{21}X_1 + \gamma_{22}X_2 + \varepsilon_2
        \end{align}
        """)
		st.markdown("""
        ### ุทุฑู ุงูุชูุฏูุฑ
        - Two-Stage Least Squares (2SLS)
        - Three-Stage Least Squares (3SLS)
        - Limited Information Maximum Likelihood (LIML)
        - Full Information Maximum Likelihood (FIML)
        - Generalized Method of Moments (GMM)

        ### ูุซุงู ุนูู ูุธุงู ูุนุงุฏูุงุช ุขููุฉ
        ูููุฐุฌ ุงูุนุฑุถ ูุงูุทูุจ ูู ุงูุงูุชุตุงุฏ:
        """)
		st.latex(r"""
        \begin{align}
        Q^d &= \alpha_0 + \alpha_1 P + \alpha_2 Y + \varepsilon_1 \quad \text{(ูุนุงุฏูุฉ ุงูุทูุจ)} \\
        Q^s &= \beta_0 + \beta_1 P + \beta_2 W + \varepsilon_2 \quad \text{(ูุนุงุฏูุฉ ุงูุนุฑุถ)} \\
        Q^d &= Q^s \quad \text{(ุดุฑุท ุงูุชูุงุฒู)}
        \end{align}
        """)
		st.info("""
        ุญูุซ:
        - Q^d: ุงููููุฉ ุงููุทููุจุฉ
        - Q^s: ุงููููุฉ ุงููุนุฑูุถุฉ
        - P: ุงูุณุนุฑ (ูุชุบูุฑ ุฏุงุฎูู)
        - Y: ุงูุฏุฎู (ูุชุบูุฑ ุฎุงุฑุฌู ูุคุซุฑ ุนูู ุงูุทูุจ)
        - W: ุชูููุฉ ุงูุฅูุชุงุฌ (ูุชุบูุฑ ุฎุงุฑุฌู ูุคุซุฑ ุนูู ุงูุนุฑุถ)
        """)

	with col2:
		# Visualization
		nodes = ['Yโ', 'Yโ', 'Xโ', 'Xโ']
		edges = [('Yโ', 'Yโ'), ('Yโ', 'Yโ'), ('Xโ', 'Yโ'), ('Xโ', 'Yโ'), ('Xโ', 'Yโ'), ('Xโ', 'Yโ')]
		G = {node: [] for node in nodes}
		for edge in edges: G[edge[0]].append(edge[1])
		pos = {'Yโ': [0, 0.5], 'Yโ': [1, 0.5], 'Xโ': [0.25, 1], 'Xโ': [0.75, 1]}
		fig = go.Figure()
		for source, targets in G.items():
			for target in targets:
				fig.add_trace(go.Scatter(x=[pos[source][0], pos[target][0]], y=[pos[source][1], pos[target][1]], mode='lines', line=dict(width=2, color='#718096'), hoverinfo='none'))
		node_x = [pos[node][0] for node in nodes]
		node_y = [pos[node][1] for node in nodes]
		colors = ['#f05454', '#f05454', '#30475e', '#30475e']
		fig.add_trace(go.Scatter(x=node_x, y=node_y, mode='markers+text', marker=dict(size=30, color=colors, line=dict(width=2, color='white')), text=nodes, textposition="middle center", textfont=dict(size=20, color='white'), hoverinfo='text', hovertext=["ุงููุชุบูุฑ ุงูุชุงุจุน ูู ุงููุนุงุฏูุฉ ุงูุฃููู", "ุงููุชุบูุฑ ุงูุชุงุจุน ูู ุงููุนุงุฏูุฉ ุงูุซุงููุฉ", "ูุชุบูุฑ ูุณุชูู ุฎุงุฑุฌู", "ูุชุบูุฑ ูุณุชูู ุฎุงุฑุฌู"]))
		fig.update_layout(title="ุงูุนูุงูุงุช ุงููุชุดุงุจูุฉ ูู ูููุฐุฌ ุงููุนุงุฏูุงุช ุงูุขููุฉ", showlegend=False, height=400, plot_bgcolor='#f9f9f9', xaxis=dict(showticklabels=False, showgrid=False, zeroline=False, range=[-0.1, 1.1]), yaxis=dict(showticklabels=False, showgrid=False, zeroline=False, range=[0.4, 1.1]))
		st.plotly_chart(fig, use_container_width=True)

		# Code Example
		st.markdown("### ูุซุงู ุนูู ุชุทุจูู ูููุฐุฌ ุงููุนุงุฏูุงุช ุงูุขููุฉ")
		code = """
        import statsmodels.api as sm
        from statsmodels.sandbox.regression.gmm import IV2SLS
        import pandas as pd

        # Load data
        df = pd.read_csv('data.csv')

        # Define variables
        endog = df['y1']
        exog = sm.add_constant(df['y2'])
        instruments = sm.add_constant(df[['x1', 'x2']])

        # Fit 2SLS model
        model = IV2SLS(endog, exog, instruments).fit()

        # Print summary
        print(model.summary())
        """
		st.code(code, language='python')

# VAR Model
elif choice == "ูููุฐุฌ VAR":
	st.header("ูููุฐุฌ VAR (Vector Autoregression)")

	col1, col2 = st.columns([2, 1])

	with col1:
		st.markdown("""
        ### ุงููุฏู ูู ุงููููุฐุฌ
        ุฏุฑุงุณุฉ ุงูุนูุงูุฉ ุงูุชุจุงุฏููุฉ ุจูู ุงููุชุบูุฑุงุช ูู ุฅุทุงุฑ ุงูุณูุงุณู ุงูุฒูููุฉุ ุญูุซ ูููู ุงููุฏู ุงูุฃุณุงุณู ูู ุงูุชูุจุค ุจุงูุฅุถุงูุฉ ุฅูู ุชุญููู ุงูุตุฏูุงุช. ูู ูุฐุง ุงููููุฐุฌุ ุชุนุชุจุฑ ูู ุงููุชุบูุฑุงุช ุชุงุจุนุฉ.

        ### ุงูุดุฑูุท ุงููุชุนููุฉ ุจุงูุงุณุชูุฑุงุฑูุฉ
        - **ุงููููุฌูุฉ ุงูุชูููุฏูุฉ:**
            - ูู ุงููุชุบูุฑุงุช ูุณุชูุฑุฉ ูู ุงููุฑู ุงูุฃูู ุฃู ุงููุฑู ุงูุซุงูู ูุนุฏู ูุฌูุฏ ุชูุงูู ูุดุชุฑู (ุฃู ุนุฏู ุตูุงุญูุฉ ูููุฐุฌ VECM)
            - ูู ุงููุชุบูุฑุงุช ูุณุชูุฑุฉ ูู ุงููุณุชูู ูู ุฅุทุงุฑ ูุธุงู ูู ุงููุนุงุฏูุงุช
        - **ุงููููุฌูุฉ ุงูุญุฏูุซุฉ:**
            - ุชุทูุฑุงุช ูููููุฐุฌ ุญูุซ ูุง ูุดุชุฑุท ุฃุตูุงู ุฏุฑุงุณุฉ ุงูุงุณุชูุฑุงุฑูุฉ ูู ุฅุทุงุฑ VAR-Integrated ุฃู VAR-TVP

        ### ุฃููุงุน ูุชุนุฏููุงุช ุงููููุฐุฌ
        - ูู ูุฌูุฏ ูุชุบูุฑุงุช ูุณุชููุฉุ ููุชูู ูู VAR ุฅูู VARx
        - ุฅุฐุง ูุงู ุงููุฏู ุชุญููู ุงูุตุฏูุงุชุ ูููู ุงุณุชุฎุฏุงู SVAR (Structural VAR)

        ### ุงูุตูุบุฉ ุงูุฑูุงุถูุฉ
        """)
		st.latex(r"""
        \mathbf{y}_t = \mathbf{c} + \mathbf{\Phi}_1 \mathbf{y}_{t-1} + \dots + \mathbf{\Phi}_p \mathbf{y}_{t-p} + \boldsymbol{\varepsilon}_t
        """)
		st.markdown("""
        ### ุงุณุชุฎุฏุงูุงุช ุงููููุฐุฌ
        - ุงูุชูุจุค ุจุงูููู ุงููุณุชูุจููุฉ ูููุชุบูุฑุงุช
        - ุชุญููู ุงูุตุฏูุงุช ูุชุฃุซูุฑูุง ุนูู ุงููุชุบูุฑุงุช
        - ุชุญููู ุชูููู ุงูุชุจุงูู (Variance Decomposition)
        - ุชุญููู ุฏูุงู ุงูุงุณุชุฌุงุจุฉ ุงููุจุถูุฉ (Impulse Response Functions)
        """)

	with col2:
		# IRF Visualization
		fig_irf = go.Figure()
		periods = list(range(11))
		irf_values = [0, 0.05, 0.1, 0.14, 0.16, 0.15, 0.12, 0.08, 0.04, 0.02, 0.01]
		confidence_upper = [v + 0.05 for v in irf_values]
		confidence_lower = [max(0, v - 0.05) for v in irf_values]
		fig_irf.add_trace(go.Scatter(x=periods + periods[::-1], y=confidence_upper + confidence_lower[::-1], fill='toself', fillcolor='rgba(58, 80, 107, 0.2)', line=dict(color='rgba(255, 255, 255, 0)'), hoverinfo='skip', showlegend=False))
		fig_irf.add_trace(go.Scatter(x=periods, y=irf_values, mode='lines+markers', line=dict(color='#3a506b', width=3), marker=dict(size=8), name='ุฏุงูุฉ ุงูุงุณุชุฌุงุจุฉ ุงููุจุถูุฉ'))
		fig_irf.add_shape(type='line', x0=0, y0=0, x1=10, y1=0, line=dict(color='#718096', width=1, dash='dash'))
		fig_irf.update_layout(title="ูุซุงู ุนูู ุฏุงูุฉ ุงูุงุณุชุฌุงุจุฉ ุงููุจุถูุฉ (IRF)", xaxis_title="ุงููุชุฑุงุช ุงูุฒูููุฉ", yaxis_title="ุงุณุชุฌุงุจุฉ ุงููุชุบูุฑ", height=300)
		st.plotly_chart(fig_irf, use_container_width=True)

		# FEVD Visualization
		fig_fevd = go.Figure()
		periods = list(range(1, 11))
		var1 = [100, 90, 80, 75, 70, 68, 65, 63, 60, 58]
		var2 = [0, 5, 10, 12, 15, 16, 18, 19, 21, 22]
		var3 = [0, 5, 10, 13, 15, 16, 17, 18, 19, 20]
		fig_fevd.add_trace(go.Bar(x=periods, y=var1, name='ุงููุชุบูุฑ 1', marker_color='#3a506b'))
		fig_fevd.add_trace(go.Bar(x=periods, y=var2, name='ุงููุชุบูุฑ 2', marker_color='#f05454'))
		fig_fevd.add_trace(go.Bar(x=periods, y=var3, name='ุงููุชุบูุฑ 3', marker_color='#30475e'))
		fig_fevd.update_layout(title="ูุซุงู ุนูู ุชูููู ุงูุชุจุงูู", xaxis_title="ุงููุชุฑุงุช ุงูุฒูููุฉ", yaxis_title="ูุณุจุฉ ุงููุณุงููุฉ (%)", barmode='stack', height=300)
		st.plotly_chart(fig_fevd, use_container_width=True)

		# Code Example
		st.markdown("### ูุซุงู ุนูู ุชุทุจูู ูููุฐุฌ VAR")
		code = """
        import pandas as pd
        from statsmodels.tsa.api import VAR

        # Load data
        df = pd.read_csv('data.csv', index_col='date', parse_dates=True)

        # Select optimal lag order
        model = VAR(df)
        results_order = model.select_order(maxlags=10)
        
        # Fit VAR model
        var_model = model.fit(results_order.aic)

        # Forecast
        forecast = var_model.forecast(df.values[-var_model.k_ar:], steps=5)

        # Impulse Response Analysis
        irf = var_model.irf(10)
        irf.plot()

        # Forecast Error Variance Decomposition
        fevd = var_model.fevd(10)
        fevd.plot()
        """
		st.code(code, language='python')

# VECM Model
elif choice == "ูููุฐุฌ VECM":
	st.header("ูููุฐุฌ VECM (Vector Error Correction Model)")

	col1, col2 = st.columns([2, 1])

	with col1:
		st.markdown("""
        ### ุงููุฏู ูู ุงููููุฐุฌ
        ุฏุฑุงุณุฉ ุงูุนูุงูุฉ ุงูุชุจุงุฏููุฉ ุจูู ุงููุชุบูุฑุงุช ุงููุนุชูุฏุฉ ุนูู ุงูุฃุฌููู ุงููุตูุฑ ูุงูุทููู ูู ุฅุทุงุฑ ูุธุงู ูู ุงููุนุงุฏูุงุช.

        ### ุงูุดุฑูุท ุงูุฃุณุงุณูุฉ
        - ูุฌุจ ุฃู ุชููู ูู ุงููุชุบูุฑุงุช ูุณุชูุฑุฉ ูู ุงููุฑู ุงูุฃูู ุฃู ูููุง ูู ุงููุฑู ุงูุซุงูู
        - ูุฌุจ ุฃู ุชุชุญูู ุดุฑูุท identification
        - ูุฌุจ ุชุญูู ุดุฑูุท ูุชุนููุฉ ุจู exogeneity of variables
        - ูุฌุจ ุฃู ูููู ูุนุงูู ุชุตุญูุญ ุงูุฎุทุฃ ุณุงูุจ ููุนููู

        ### ุฃููุงุน ูุชุนุฏููุงุช ุงููููุฐุฌ
        - ูู ุญุงูุฉ ูุฌูุฏ ูุชุบูุฑุงุช ูุณุชููุฉุ ูุตุจุญ ูููุฐุฌ VECM ุจู VECMX
        - ุฅุฐุง ูุงู ูุฏู ุงูุฏุฑุงุณุฉ ูู ุชุญููู ุงูุตุฏูุงุชุ ูููู ุงูุงูุชูุงู ุฅูู SVECM

        ### ุงูุตูุบุฉ ุงูุฑูุงุถูุฉ
        """)
		st.latex(r"""
        \Delta Y_t = \alpha \beta' Y_{t-1} + \sum_{i=1}^{p-1} \Gamma_i \Delta Y_{t-i} + \varepsilon_t
        """)
		st.markdown("ุญูุซ:")
		st.latex(r"""
        \begin{align}
        \alpha &: \text{ูุตูููุฉ ูุนุงููุงุช ุงูุชุนุฏูู (ูุนุงููุงุช ุชุตุญูุญ ุงูุฎุทุฃ)} \\
        \beta &: \text{ูุตูููุฉ ูุชุฌูุงุช ุงูุชูุงูู ุงููุดุชุฑู} \\
        \Gamma_i &: \text{ูุตูููุฉ ูุนุงููุงุช ุงูุขุซุงุฑ ูุตูุฑุฉ ุงูุฃุฌู}
        \end{align}
        """)
		st.markdown("""
        ### ุงูุนูุงูุฉ ุจูู VAR ู VECM
        ูููู ุงุนุชุจุงุฑ VECM ุญุงูุฉ ุฎุงุตุฉ ูู ูููุฐุฌ VAR ูุน ูููุฏ ุนูู ุงููุนุงููุงุช ุทูููุฉ ุงูุฃุฌู. ูุชุญุฏูุฏุงูุ VECM ูู ูููุฐุฌ VAR ูููุฏ ุจูุฌูุฏ ุนูุงูุฉ ุชูุงูู ูุดุชุฑู ุจูู ุงููุชุบูุฑุงุช.

        ### ูุฑุงุญู ุชุทุจูู ูููุฐุฌ VECM
        1. ุงุฎุชุจุงุฑ ุงุณุชูุฑุงุฑูุฉ ุงูุณูุงุณู ุงูุฒูููุฉ ูุงูุชุฃูุฏ ูู ุฃููุง ูุชูุงููุฉ ูู ุงูุฏุฑุฌุฉ ุงูุฃููู I(1)
        2. ุชุญุฏูุฏ ุงูุนุฏุฏ ุงูุฃูุซู ูููุฌูุงุช ุงูุฒูููุฉ ุจุงุณุชุฎุฏุงู ูุนุงููุฑ ุงููุนูููุงุช
        3. ุงุฎุชุจุงุฑ ูุฌูุฏ ุชูุงูู ูุดุชุฑู ุจุงุณุชุฎุฏุงู ูููุฌูุฉ ุฌููุงูุณู
        4. ุชูุฏูุฑ ูููุฐุฌ VECM
        5. ุงุฎุชุจุงุฑ ุตูุงุญูุฉ ุงููููุฐุฌ ูู ุฎูุงู ูุญุต ุงูุจูุงูู ููุนุงูู ุชุตุญูุญ ุงูุฎุทุฃ
        """)

	with col2:
		# Visualization
		np.random.seed(42)
		t = np.linspace(0, 10, 200)
		equilibrium = 2 * t
		y1 = equilibrium + np.random.normal(0, 1, 200)
		y2 = equilibrium + np.random.normal(0, 1, 200)
		shock_point = 100
		y1[shock_point:shock_point + 30] += np.linspace(0, 5, 30)
		y1[shock_point + 30:] += 5 - 5 * np.exp(-0.1 * np.arange(70))
		fig = go.Figure()
		fig.add_trace(go.Scatter(x=t, y=y1, mode='lines', name='ุงูุณูุณูุฉ ุงูุฒูููุฉ 1', line=dict(color='#3a506b', width=2)))
		fig.add_trace(go.Scatter(x=t, y=y2, mode='lines', name='ุงูุณูุณูุฉ ุงูุฒูููุฉ 2', line=dict(color='#f05454', width=2)))
		fig.add_trace(go.Scatter(x=t, y=equilibrium, mode='lines', name='ุงูุชูุงุฒู ุทููู ุงูุฃุฌู', line=dict(color='#30475e', width=2, dash='dash')))
		fig.add_annotation(x=t[shock_point], y=y1[shock_point], text="ุงูุตุฏูุฉ", showarrow=True, arrowhead=1, ax=0, ay=-40)
		fig.add_annotation(x=t[shock_point + 50], y=y1[shock_point + 50], text="ุชุตุญูุญ ุงูุฎุทุฃ", showarrow=True, arrowhead=1, ax=0, ay=-40)
		fig.update_layout(title="ุขููุฉ ุนูู ูููุฐุฌ ุชุตุญูุญ ุงูุฎุทุฃ (VECM)", xaxis_title="ุงูุฒูู", yaxis_title="ุงููููุฉ", height=400)
		st.plotly_chart(fig, use_container_width=True)

		# Code Example
		st.markdown("### ูุซุงู ุนูู ุชุทุจูู ูููุฐุฌ VECM")
		code = """
        import pandas as pd
        from statsmodels.tsa.vector_ar.vecm import coint_johansen, VECM

        # Load data
        df = pd.read_csv('data.csv', index_col='date', parse_dates=True)

        # Johansen cointegration test
        johansen_test = coint_johansen(df, deterministic_order=0, k_ar_diff=2)

        # Determine number of cointegrating relationships
        coint_rank = johansen_test.rank

        # Fit VECM model
        model = VECM(df, k_ar_diff=2, coint_rank=coint_rank, deterministic='ci')
        results = model.fit()

        # Print summary
        print(results.summary())
        """
		st.code(code, language='python')

# ARDL Model
elif choice == "ูููุฐุฌ ARDL":
	st.header("ูููุฐุฌ ARDL (Autoregressive Distributed Lag)")

	col1, col2 = st.columns([2, 1])

	with col1:
		st.markdown("""
        ### ุงููุฏู ูู ุงููููุฐุฌ
        ุฏุฑุงุณุฉ ุงูุชุฃุซูุฑ ุงูุฏููุงูููู ูุงูุนูุงูุฉ ุทูููุฉ ุงูุฃุฌู ูุน ุชูุฏูุฑ ูุตูุฑุฉ ุงูุฃุฌู ูู ุฅุทุงุฑ ูุนุงุฏูุฉ ูุงุญุฏุฉ (ูุง ููุฌุฏ feedback ุจูู ุงููุชุบูุฑ ุงูุชุงุจุน ูุงููุชุบูุฑุงุช ุงููุณุชููุฉ).

        ### ุงูุดุฑูุท ุงูุฃุณุงุณูุฉ
        - ุงูุงุณุชูุฑุงุฑูุฉ ูู ุงููุณุชูู ุฃู ุงููุฑู ุงูุฃูู ุนูู ุงูุฃูุซุฑ (ูุง ุชูุฌุฏ ูุชุบูุฑุงุช ูุณุชูุฑุฉ ูู ุงููุฑู ุงูุซุงูู)
        - ุญุฌู ุงูุนููุฉ ุนูู ุงูุฃูู 30
        - ูู ุญุงูุฉ ุญุฌู ุงูุนููุฉ ุฃูู ูู 30ุ ูุณุชุฎุฏู ARDL BOOTSTRAPPING

        ### ุฃููุงุน ูุชุนุฏููุงุช ุงููููุฐุฌ
        - ูู ุญุงูุฉ ุงููุชุบูุฑ ุงูุชุงุจุน ูุณุชูุฑ ูู ุงููุณุชููุ ูุณุชุฎุฏู AUGMENTED ARDL
        - ูู ูุฌูุฏ ุนุฏุฉ ุชุบูุฑุงุช ูููููุฉุ ูุณุชุฎุฏู FOURRIER ARDL ุฃู ุงุณุชุฎุฏุงู DUMMIES
        - ูู ุญุงูุฉ ุนุฏู ูุฌูุฏ ุนูุงูุฉ ุทูููุฉ ุงูุฃุฌูุ ูููู ุงุณุชุฎุฏุงู DIFFERENCED ARDL ูุจุฏูู

        ### ุงูุตูุบุฉ ุงูุฑูุงุถูุฉ
        """)
		st.latex(r"""
        \Delta y_t = \alpha_0 + \delta y_{t-1} + \theta' \mathbf{x}_{t-1} + \sum_{i=1}^{p-1} \phi_i \Delta y_{t-i} + \sum_{j=0}^{q-1} \boldsymbol{\beta}_j' \Delta \mathbf{x}_{t-j} + \varepsilon_t
        """)
		st.markdown("""
        ### ูุฒุงูุง ูููุฐุฌ ARDL
        - ูููู ุงุณุชุฎุฏุงูู ูุน ูุชุบูุฑุงุช ุฐุงุช ุฏุฑุฌุงุช ุชูุงูู ูุฎุชููุฉ (I(0) ู I(1) ูููู ููุณ I(2))
        - ูุณูุญ ุจุชูุฏูุฑ ุงูุนูุงูุงุช ุทูููุฉ ููุตูุฑุฉ ุงูุฃุฌู ูู ูุนุงุฏูุฉ ูุงุญุฏุฉ
        - ูุนุงูุฌ ูุดููุฉ Endogeneity ูุงุฑุชุจุงุท ุงูุจูุงูู ูู ุฎูุงู ุฅุฏุฑุงุฌ ุนุฏุฏ ูุงูู ูู ุงููุฌูุงุช ุงูุฒูููุฉ
        - ูููู ุงุณุชุฎุฏุงูู ูุน ุนููุงุช ุตุบูุฑุฉ ูุณุจูุงู

        ### ุงุฎุชุจุงุฑุงุช ุงูุญุฏูุฏ (Bounds Test)
        ูุณุชุฎุฏู ุงุฎุชุจุงุฑ ุงูุญุฏูุฏ ARDL Bounds Test ููุชุญูู ูู ูุฌูุฏ ุนูุงูุฉ ุชูุงุฒู ุทูููุฉ ุงูุฃุฌู ุจูู ุงููุชุบูุฑุงุช.
        - **ุงููุฑุถูุฉ ุงูุตูุฑูุฉ:** ูุง ุชูุฌุฏ ุนูุงูุฉ ุชูุงุฒู ุทูููุฉ ุงูุฃุฌู.
        - **ุงููุฑุถูุฉ ุงูุจุฏููุฉ:** ุชูุฌุฏ ุนูุงูุฉ ุชูุงุฒู ุทูููุฉ ุงูุฃุฌู.
        
        ### ูุฑุงุญู ุชุทุจูู ูููุฐุฌ ARDL
        1. ุงูุชุฃูุฏ ูู ุงุณุชูุฑุงุฑูุฉ ุงููุชุบูุฑุงุช (I(0) ุฃู I(1) ูููุณ I(2))
        2. ุชุญุฏูุฏ ุงูุนุฏุฏ ุงูุฃูุซู ูููุฌูุงุช ุงูุฒูููุฉ
        3. ุชูุฏูุฑ ูููุฐุฌ ARDL ู ุฅุฌุฑุงุก ุงุฎุชุจุงุฑ ุงูุญุฏูุฏ
        4. ุชูุฏูุฑ ุงูุนูุงูุฉ ุทูููุฉ ุงูุฃุฌู ููููุฐุฌ ุชุตุญูุญ ุงูุฎุทุฃ (ุฅุฐุง ูุฌุฏุช ุนูุงูุฉ)
        5. ุฅุฌุฑุงุก ุงุฎุชุจุงุฑุงุช ุงูุชุดุฎูุต ููุชุญูู ูู ุตูุงุญูุฉ ุงููููุฐุฌ
        """)

	with col2:
		# Visualization
		fig = go.Figure()
		f_stat = 5.2
		lower_bound_1 = 2.8
		upper_bound_1 = 3.8
		lower_bound_5 = 2.1
		upper_bound_5 = 3.0
		fig.add_trace(go.Scatter(x=['ุงููููุฉ ุงููุญุณูุจุฉ'], y=[f_stat], mode='markers', marker=dict(size=15, color='#f05454'), name='ุฅุญุตุงุฆูุฉ F ุงููุญุณูุจุฉ'))
		fig.add_trace(go.Scatter(x=['1%', '5%'], y=[lower_bound_1, lower_bound_5], mode='lines+markers', marker=dict(size=10, color='#3a506b'), line=dict(width=2, color='#3a506b'), name='ุงูุญุฏ ุงูุฃุฏูู'))
		fig.add_trace(go.Scatter(x=['1%', '5%'], y=[upper_bound_1, upper_bound_5], mode='lines+markers', marker=dict(size=10, color='#30475e'), line=dict(width=2, color='#30475e'), name='ุงูุญุฏ ุงูุฃุนูู'))
		fig.add_shape(type='rect', x0=-0.5, y0=0, x1=2.5, y1=lower_bound_1, fillcolor='rgba(255, 0, 0, 0.1)', line=dict(width=0), layer='below')
		fig.add_shape(type='rect', x0=-0.5, y0=upper_bound_1, x1=2.5, y1=7, fillcolor='rgba(0, 255, 0, 0.1)', line=dict(width=0), layer='below')
		fig.add_shape(type='rect', x0=-0.5, y0=lower_bound_1, x1=2.5, y1=upper_bound_1, fillcolor='rgba(255, 255, 0, 0.1)', line=dict(width=0), layer='below')
		fig.update_layout(title="ูุซุงู ุนูู ุงุฎุชุจุงุฑ ุงูุญุฏูุฏ (Bounds Test)", xaxis_title="ูุณุชููุงุช ุงููุนูููุฉ", yaxis_title="ูููุฉ ุฅุญุตุงุฆูุฉ F", height=300, legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1))
		st.plotly_chart(fig, use_container_width=True)

		# Code Example
		st.markdown("### ูุซุงู ุนูู ุชุทุจูู ูููุฐุฌ ARDL")
		code = """
        from statsmodels.tsa.api import ardl_select_order, ARDL
        import pandas as pd

        # Load data
        df = pd.read_csv('data.csv', index_col='date', parse_dates=True)

        # Select optimal lag order
        sel_order = ardl_select_order(
            endog=df['y'], exog=df[['x1', 'x2']], maxlag=4, trend='c'
        )
        
        # Fit ARDL model
        model = sel_order.model.fit()

        # Print model summary
        print(model.summary())

        # Perform bounds test
        bounds_test = model.bounds_test()
        print(bounds_test)

        # Get long-run coefficients
        long_run = model.long_run_effects()
        print(long_run)
        """
		st.code(code, language='python')

# NARDL Model
elif choice == "ูููุฐุฌ NARDL":
	st.header("ูููุฐุฌ NARDL (Nonlinear ARDL)")

	col1, col2 = st.columns([2, 1])

	with col1:
		st.markdown("""
        ### ุงููุฏู ูู ุงููููุฐุฌ
        ุฏุฑุงุณุฉ ุงูุชุฃุซูุฑุงุช ุงูุฏููุงููููุฉ ุบูุฑ ุงููุชูุงุซูุฉ ูููุชุบูุฑุงุช ุงููุณุชููุฉ ุนูู ุงููุชุบูุฑ ุงูุชุงุจุน ูู ุงูุฃุฌู ุงูุทููู ูุงููุตูุฑ.

        ### ุงูุดุฑูุท ุงูุฃุณุงุณูุฉ
        - ููุณ ุงูุดุฑูุท ุงููุชุนููุฉ ุจูููุฐุฌ ARDL ูููุง ูุชุนูู ุจุงูุงุณุชูุฑุงุฑูุฉ (I(0) ุฃู I(1) ูููุณ I(2))
        - ูููู ุฃู ูููู ููุงู feedback ุจูู ุงููุชุบูุฑุงุช ุงููุณุชููุฉ ูุงููุชุบูุฑ ุงูุชุงุจุน

        ### ุญุงูุงุช ุฎุงุตุฉ ูุชุนุฏููุงุช
        - ูู ูุฌูุฏ ูุดูู singularityุ ูููู ุงูุงูุชูุงู ุฅูู ุทุฑููุฉ ุงูุชูุฏูุฑ ุจุงูุฎุทูุชูู (two-step)
        - ูู ุญุงูุฉ ุณูุทุฑุฉ ุชุฃุซูุฑุงุช ููุฌุจุฉ ุนูู ุงูุชุฃุซูุฑุงุช ุงูุณุงูุจุฉ ุฃู ุงูุนูุณุ ูููู ุงููุฌูุก ุฅูู ููุงุฐุฌ Multiple or Threshold ARDL
        
        ### ุงูุตูุบุฉ ุงูุฑูุงุถูุฉ
        """)
		st.latex(r"""
        \Delta y_t = \alpha_0 + \delta y_{t-1} + \theta^+ x^+_{t-1} + \theta^- x^-_{t-1} + \dots + \varepsilon_t
        """)
		st.markdown("ุญูุซ:")
		st.latex(r"""
        \begin{align}
        x_t^+ &= \sum_{j=1}^{t} \Delta x_j^+ = \sum_{j=1}^{t} \max(\Delta x_j, 0) \\
        x_t^- &= \sum_{j=1}^{t} \Delta x_j^- = \sum_{j=1}^{t} \min(\Delta x_j, 0)
        \end{align}
        """)
		st.markdown("""
        ### ุงุฎุชุจุงุฑ ุนุฏู ุงูุชูุงุซู
        ุจุนุฏ ุชูุฏูุฑ ูููุฐุฌ NARDLุ ูุชู ุงุฎุชุจุงุฑ ูุฌูุฏ ุชุฃุซูุฑุงุช ุบูุฑ ูุชูุงุซูุฉ ุจุงุณุชุฎุฏุงู ุงุฎุชุจุงุฑ Wald ุนูู ุงููุนุงููุงุช.
        - **ุนุฏู ุชูุงุซู ุทููู ุงูุฃุฌู:** $\theta^+ = \theta^-$
        - **ุนุฏู ุชูุงุซู ูุตูุฑ ุงูุฃุฌู:** $\beta_j^+ = \beta_j^-$
        
        ### ูุฑุงุญู ุชุทุจูู ูููุฐุฌ NARDL
        1. ุงูุชุฃูุฏ ูู ุงุณุชูุฑุงุฑูุฉ ุงููุชุบูุฑุงุช (I(0) ุฃู I(1) ูููุณ I(2))
        2. ุชูููู ุงููุชุบูุฑุงุช ุงููุณุชููุฉ ุฅูู ููููุงุช ููุฌุจุฉ ูุณุงูุจุฉ
        3. ุชูุฏูุฑ ูููุฐุฌ NARDL ูุฅุฌุฑุงุก ุงุฎุชุจุงุฑ ุงูุญุฏูุฏ
        4. ุงุฎุชุจุงุฑ ุนุฏู ุงูุชูุงุซู ูู ุงูุฃุฌููู ุงูุทููู ูุงููุตูุฑ
        5. ุชุญููู ุงููุนุงููุงุช ูุชูุณูุฑ ุงููุชุงุฆุฌ
        """)

	with col2:
		# Visualization 1
		np.random.seed(42)
		t = np.linspace(0, 10, 100)
		x = np.sin(t) + 0.1 * t
		dx = np.diff(x, prepend=x[0])
		x_pos = np.maximum(dx, 0).cumsum()
		x_neg = np.minimum(dx, 0).cumsum()
		fig1 = go.Figure()
		fig1.add_trace(go.Scatter(x=t, y=x, mode='lines', name='ุงููุชุบูุฑ ุงููุณุชูู (x)', line=dict(color='#3a506b', width=2)))
		fig1.add_trace(go.Scatter(x=t, y=x_pos, mode='lines', name='ุงููููู ุงูููุฌุจ (xโบ)', line=dict(color='#2ecc71', width=2)))
		fig1.add_trace(go.Scatter(x=t, y=x_neg, mode='lines', name='ุงููููู ุงูุณุงูุจ (xโป)', line=dict(color='#e74c3c', width=2)))
		fig1.update_layout(title="ุชูููู ุงููุชุบูุฑ ุงููุณุชูู ูู ูููุฐุฌ NARDL", xaxis_title="ุงูุฒูู", yaxis_title="ุงููููุฉ", height=300)
		st.plotly_chart(fig1, use_container_width=True)

		# Visualization 2
		t_sim = np.arange(20)
		cum_effect_pos = np.concatenate([np.zeros(5), 0.5 + 0.1 * np.arange(15)])
		cum_effect_neg = np.concatenate([np.zeros(10), -1 - 0.2 * np.arange(10)])
		fig2 = go.Figure()
		fig2.add_trace(go.Scatter(x=t_sim, y=cum_effect_pos, mode='lines', name='ุงูุชุฃุซูุฑ ุงูุชุฑุงููู ููุตุฏูุฉ ุงูุฅูุฌุงุจูุฉ', line=dict(color='#2ecc71', width=2, dash='dash')))
		fig2.add_trace(go.Scatter(x=t_sim, y=cum_effect_neg, mode='lines', name='ุงูุชุฃุซูุฑ ุงูุชุฑุงููู ููุตุฏูุฉ ุงูุณูุจูุฉ', line=dict(color='#e74c3c', width=2, dash='dash')))
		fig2.update_layout(title="ุงูุชุฃุซูุฑุงุช ุงูุชุฑุงูููุฉ ุบูุฑ ุงููุชูุงุซูุฉ ููุตุฏูุงุช", xaxis_title="ุงููุชุฑุงุช ุงูุฒูููุฉ", yaxis_title="ุงูุชุฃุซูุฑ", height=300)
		st.plotly_chart(fig2, use_container_width=True)
		
		# Code Example (Conceptual)
		st.markdown("### ูุซุงู ุชุทุจููู (ููุงูููู)")
		st.info("ูุง ุชูุฌุฏ ุญุฒูุฉ ุจุงูุซูู ููุงุณูุฉ ูู NARDLุ ูุฐูู ุงูููุฏ ุงูุชุงูู ูู ููุชูุถูุญ ุงูููุงูููู.")
		code = """
        import pandas as pd
        import statsmodels.api as sm

        # Load data
        df = pd.read_csv('data.csv', index_col='date', parse_dates=True)

        # 1. Decompose independent variable 'x'
        df['dx'] = df['x'].diff().fillna(0)
        df['x_pos'] = df['dx'][df['dx'] > 0].cumsum().fillna(0)
        df['x_neg'] = df['dx'][df['dx'] < 0].cumsum().fillna(0)

        # 2. Define model variables (conceptual)
        # y ~ y_lag + x_pos + x_neg + dy_lag + dx_pos + dx_neg...
        
        # 3. Estimate with OLS (as ARDL)
        # model = sm.OLS(y, X).fit()
        
        # 4. Perform Wald test for asymmetry
        # H0: coef(x_pos) = coef(x_neg)
        """
		st.code(code, language='python')

# Dynamic Panel Models
elif choice == "ููุงุฐุฌ ุงูุจุงูู ุงูุฏููุงููููุฉ":
	st.header("ููุงุฐุฌ ุงูุจุงูู ุงูุฏููุงููููุฉ (Dynamic Panel Models)")

	col1, col2 = st.columns([2, 1])

	with col1:
		st.markdown("""
        ### ุงููุฏู ูู ุงููููุฐุฌ
        ููู ูุชูุฏูุฑ ุงูุนูุงูุฉ ุงูุฏููุงููููุฉ ุจูู ุงููุชุบูุฑุงุช ูููู ุณููู ุงููุชุบูุฑุงุช ุนุจุฑ ุงูุฒููุ ุณูุงุก ูู ุฅุทุงุฑ ูุนุงุฏูุฉ ูุงุญุฏุฉ ุฃู ูุธุงู ูู ุงููุนุงุฏูุงุช.

        ### ุงูุดุฑูุท ุงูุฃุณุงุณูุฉ ููุชูุฏูุฑ ุจุทุฑููุฉ GMM
        - ููุชุฑุถ ุฃู ุงููุนุงูู ุงููุฑุชุจุท ุจุงููุชุบูุฑ ุงูุชุงุจุน ูุฌุจ ุฃู ูููู ุฃุตุบุฑ ูู 1
        - ูู ุงููุณุชุญุณู ุฃู ูุง ูููู ููุงู cross-sectional dependence
        - ูุฌุจ ุฃู ุชููู ุดุฑูุท ุงูุนุฒูู ูุนุฑูุฉ (ุดุฑุท ูุธุฑู)
        - ูุฌุจ ุฃู ุชููู instruments ููุณุช ูุซูุฑุฉ ุฌุฏุงู ูุชููู ูุนุฑูุฉ ููุญุฏุฏุฉ ุจุดูู ุฌูุฏ ุญุณุจ ุงุฎุชุจุงุฑุงุช Sargan ู Hansen
        - ูู ุญุงูุฉ ุงููุนุงูู ุงููุฑุชุจุท ุจุงููุชุบูุฑ ุงูุชุงุจุน ุงููุคุฎุฑ ูุณุงูู ุฅูู ุงููุงุญุฏุ ูููู ุงููุฌูุก ุฅูู differenced GMM

        ### ุงูุตูุบุฉ ุงูุฑูุงุถูุฉ ูููููุฐุฌ ุงูุฏููุงูููู ุงูุจุณูุท
        """)
		st.latex(r"""
        y_{it} = \gamma y_{i,t-1} + \boldsymbol{x}_{it}' \boldsymbol{\beta} + \alpha_i + \varepsilon_{it}
        """)
		st.markdown("""
        ### ููุงุฐุฌ ุงูุจุงูู ุงูุฏููุงููููุฉ ุญุณุจ ุฃุจุนุงุฏ ุงูุนููุฉ
        - **N ูุจูุฑุ T ุตุบูุฑ:**
            - ุทุฑููุฉ Arellano-Bond (Difference GMM)
            - ุทุฑููุฉ Arellano-Bover/Blundell-Bond (System GMM)
        - **N ู T ูุจูุฑุงู:**
            - ุทุฑููุฉ Mean Group (MG)
            - ุทุฑููุฉ Pooled Mean Group (PMG)
            - ุทุฑููุฉ Dynamic Fixed Effects (DFE)

        ### ุงูุงุฎุชุจุงุฑุงุช ุงููุณุจูุฉ ุงููููุฉ
        - ุงุฎุชุจุงุฑุงุช ุนุฏู ุชุฌุงูุณ ุงููููู
        - ุงุฎุชุจุงุฑุงุช cross-sectional dependence
        - ุงุฎุชุจุงุฑุงุช ุงูุงุณุชูุฑุงุฑูุฉ ูุงูุชูุงูู ุงููุดุชุฑู ููุจุงูู
        """)

	with col2:
		# Visualization
		fig = go.Figure()
		true_gamma = 0.7
		t_values = [5, 10, 15, 20, 25, 30]
		gamma_ols = [0.9, 0.85, 0.82, 0.79, 0.77, 0.76]
		gamma_fe = [0.55, 0.58, 0.61, 0.63, 0.65, 0.66]
		gamma_gmm = [0.72, 0.71, 0.71, 0.7, 0.7, 0.7]
		fig.add_shape(type='line', x0=0, y0=true_gamma, x1=35, y1=true_gamma, line=dict(color='#2ecc71', width=2, dash='dash'))
		fig.add_trace(go.Scatter(x=t_values, y=gamma_ols, mode='lines+markers', name='ุชูุฏูุฑ OLS', line=dict(color='#e74c3c', width=2)))
		fig.add_trace(go.Scatter(x=t_values, y=gamma_fe, mode='lines+markers', name='ุชูุฏูุฑ Fixed Effects', line=dict(color='#3498db', width=2)))
		fig.add_trace(go.Scatter(x=t_values, y=gamma_gmm, mode='lines+markers', name='ุชูุฏูุฑ GMM', line=dict(color='#f39c12', width=2)))
		fig.add_annotation(x=30, y=true_gamma, text="ุงููููุฉ ุงูุญููููุฉ", showarrow=False, yshift=10)
		fig.update_layout(title="ุชุญูุฒ ุงูุชูุฏูุฑ ูู ุงูููุงุฐุฌ ุงูุฏููุงููููุฉ ุญุณุจ T", xaxis_title="ุนุฏุฏ ุงููุชุฑุงุช ุงูุฒูููุฉ (T)", yaxis_title="ุชูุฏูุฑ ุงููุนุงูู ฮณ", height=350)
		st.plotly_chart(fig, use_container_width=True)

		# Code Example
		st.markdown("### ูุซุงู ุนูู ุชุทุจูู ูููุฐุฌ ุจุงูู ุฏููุงูููู (System GMM)")
		code = """
        from linearmodels.panel import PanelOLS, RandomEffects, PanelGMM
        import pandas as pd
        import statsmodels.api as sm

        # Load data and set index
        df = pd.read_csv('data.csv')
        df = df.set_index(['id', 'time'])

        # Define model formula
        formula = 'y ~ 1 + y_lag1 + x1 + x2'

        # Estimate System GMM
        # Note: Instruments need to be carefully chosen.
        # This is a simplified example.
        model = PanelGMM.from_formula(formula=formula, data=df)
        results = model.fit()

        # Print summary
        print(results)

        # Check instrument validity
        print(results.sargan)
        """
		st.code(code, language='python')

# Static Panel Models
elif choice == "ููุงุฐุฌ ุงูุจุงูู ุงูุณุงููุฉ":
	st.header("ููุงุฐุฌ ุงูุจุงูู ุงูุณุงููุฉ (Static Panel Models)")

	col1, col2 = st.columns([2, 1])

	with col1:
		st.markdown("""
        ### ุงููุฏู ูู ุงููููุฐุฌ
        ุฏุฑุงุณุฉ ุงูุชุฃุซูุฑุงุช ุงูุณุงููุฉ ูููุชุบูุฑุงุช ุงููุณุชููุฉ ุนูู ุงููุชุบูุฑ ุงูุชุงุจุนุ ูุน ุงูุชุญูู ูู ุงูุฎุตุงุฆุต ุบูุฑ ุงููุดุงูุฏุฉ ูููุญุฏุงุช.

        ### ุงูุดุฑูุท ุงูุฃุณุงุณูุฉ
        - ููุงุฐุฌ ุงูุจุงูู ุงูุณุงููุฉ ุงูุชูููุฏูุฉ ุชูุชุฑุถ ุฃู ุงููููู (slopes) ุซุงุจุชุฉ.
        - ุงูุงุฎุชูุงุฑ ุจูู ุงูุชุฃุซูุฑุงุช ุงูุซุงุจุชุฉ ูุงูุนุดูุงุฆูุฉ ูุนุชูุฏ ุนูู ุงุฎุชุจุงุฑ Hausman.

        ### ุฃููุงุน ูุชุนุฏููุงุช ุงููููุฐุฌ
        - **Fixed Effects (FE):** ูุชุญูู ูู ุงูุฎุตุงุฆุต ุงูุซุงุจุชุฉ ุนุจุฑ ุงูุฒูู ููู ูุญุฏุฉ.
        - **Random Effects (RE):** ููุชุฑุถ ุฃู ุงูุชุฃุซูุฑุงุช ุบูุฑ ูุฑุชุจุทุฉ ุจุงููุชุบูุฑุงุช ุงููุณุชููุฉ.
        - **Pooled OLS:** ูุชุฌุงูู ุจููุฉ ุงูุจุงูู ููุนุชุจุฑ ุงูุจูุงูุงุช ููุทุนูุฉ.
        
        ### ุงูุตูุบุฉ ุงูุฑูุงุถูุฉ
        """)
		st.markdown("#### ูููุฐุฌ ุงูุชุฃุซูุฑุงุช ุงูุซุงุจุชุฉ (Fixed Effects Model)")
		st.latex(r"y_{it} = \boldsymbol{x}_{it}' \boldsymbol{\beta} + \alpha_i + \varepsilon_{it}")
		st.markdown("#### ูููุฐุฌ ุงูุชุฃุซูุฑุงุช ุงูุนุดูุงุฆูุฉ (Random Effects Model)")
		st.latex(r"y_{it} = \boldsymbol{x}_{it}' \boldsymbol{\beta} + (\alpha + u_i) + \varepsilon_{it}")
		st.markdown("""
        ### ุงูุงุฎุชุจุงุฑุงุช ุงููููุฉ
        - **ุงุฎุชุจุงุฑ Hausman:** ููููุงุถูุฉ ุจูู FE ู RE.
        - **ุงุฎุชุจุงุฑ Breusch-Pagan LM:** ููููุงุถูุฉ ุจูู RE ู Pooled OLS.
        - **ุงุฎุชุจุงุฑ F:** ููููุงุถูุฉ ุจูู FE ู Pooled OLS.
        - **ุงุฎุชุจุงุฑุงุช Cross-sectional Dependence, Heteroskedasticity, Serial Correlation.**

        ### ูุนุงูุฌุฉ ุงููุดุงูู
        - **Heteroskedasticity / Serial Correlation:** ุงุณุชุฎุฏุงู Robust/Clustered Standard Errors.
        - **Cross-sectional Dependence:** ุงุณุชุฎุฏุงู Driscoll-Kraay Standard Errors.
        - **Endogeneity:** ุงุณุชุฎุฏุงู Instrumental Variables (Panel IV).
        """)

	with col2:
		# Visualization
		fig1 = go.Figure()
		np.random.seed(42)
		x = np.linspace(0, 10, 20)
		y1 = 2 + 1.5 * x + np.random.normal(0, 1, 20)
		y2 = 2 + 1.5 * x + np.random.normal(0, 1, 20)
		all_x = np.concatenate([x, x])
		all_y = np.concatenate([y1, y2])
		coef = np.polyfit(all_x, all_y, 1)
		line = coef[0] * np.linspace(0, 10, 100) + coef[1]
		fig1.add_trace(go.Scatter(x=x, y=y1, mode='markers', name='ุงููุฌููุนุฉ 1', marker=dict(color='#3a506b')))
		fig1.add_trace(go.Scatter(x=x, y=y2, mode='markers', name='ุงููุฌููุนุฉ 2', marker=dict(color='#f05454')))
		fig1.add_trace(go.Scatter(x=np.linspace(0, 10, 100), y=line, mode='lines', name='ุฎุท ุงูุงูุญุฏุงุฑ ุงููุฌูุน', line=dict(color='black')))
		fig1.update_layout(title="ูููุฐุฌ ุงูุงูุญุฏุงุฑ ุงูุชุฌููุนู (Pooled OLS)", height=250, showlegend=False)
		st.plotly_chart(fig1, use_container_width=True)

		fig2 = go.Figure()
		y_fe_1 = 1 + 1.5 * x + np.random.normal(0, 0.7, 20)
		y_fe_2 = 5 + 1.5 * x + np.random.normal(0, 0.7, 20)
		fig2.add_trace(go.Scatter(x=x, y=y_fe_1, mode='markers', name='ุงููุฌููุนุฉ 1', marker=dict(color='#3a506b')))
		fig2.add_trace(go.Scatter(x=x, y=y_fe_2, mode='markers', name='ุงููุฌููุนุฉ 2', marker=dict(color='#f05454')))
		fig2.add_trace(go.Scatter(x=x, y=1 + 1.5 * x, mode='lines', line=dict(color='#3a506b')))
		fig2.add_trace(go.Scatter(x=x, y=5 + 1.5 * x, mode='lines', line=dict(color='#f05454')))
		fig2.update_layout(title="ูููุฐุฌ ุงูุชุฃุซูุฑุงุช ุงูุซุงุจุชุฉ (Fixed Effects)", height=250, showlegend=False)
		st.plotly_chart(fig2, use_container_width=True)

		# Code Example
		st.markdown("### ูุซุงู ุนูู ุชุทุจูู ููุงุฐุฌ ุงูุจุงูู ุงูุณุงููุฉ")
		code = """
        from linearmodels.panel import PanelOLS, RandomEffects, PooledOLS
        import pandas as pd

        # Load data and set index
        df = pd.read_csv('data.csv')
        df = df.set_index(['id', 'time'])

        # Pooled OLS
        pooled_model = PooledOLS.from_formula('y ~ 1 + x1 + x2', data=df)
        pooled_results = pooled_model.fit()

        # Fixed Effects
        fe_model = PanelOLS.from_formula('y ~ 1 + x1 + x2 + EntityEffects', data=df)
        fe_results = fe_model.fit()

        # Random Effects
        re_model = RandomEffects.from_formula('y ~ 1 + x1 + x2', data=df)
        re_results = re_model.fit()

        # Hausman Test (conceptual)
        # Compare coefficients of fe_results and re_results
        # No direct function in linearmodels, needs manual implementation or statsmodels
        print(fe_results)
        print(re_results)
        """
		st.code(code, language='python')

# Contradictions in Arab Studies
elif choice == "ุงููุชูุงูุถุงุช ูู ุงูุฏุฑุงุณุงุช ุงูุนุฑุจูุฉ":
	st.header("ุงููุชูุงูุถุงุช ูู ุงูุฏุฑุงุณุงุช ุงูุนุฑุจูุฉ")

	st.error("""
    ### ุฃูู ุงููุชูุงูุถุงุช ุงููููุฌูุฉ ุงูุดุงุฆุนุฉ
    - **ุงุณุชุฎุฏุงู ุงุฎุชุจุงุฑ ุฌููุงูุณูู ูุน ุชุบูุฑุงุช ูููููุฉ:** ุงุฎุชุจุงุฑ ุฌููุงูุณูู ุงูููุงุณู ููุชุฑุถ ุนุฏู ูุฌูุฏ ูุณูุฑ ูููููุฉ.
    - **ุงูุฌูุน ุจูู ARDL ู VAR:** ุงูุฃูู ุฃุญุงุฏู ุงููุนุงุฏูุฉ (single-equation) ูุงูุขุฎุฑ ูุธุงู ูุนุงุฏูุงุช (system)ุ ููููุง ุงูุชุฑุงุถุงุช ูุฎุชููุฉ ุญูู ุงูุฏุงุฎููุฉ (endogeneity).
    - **ุงูุฌูุน ุจูู ุงุฎุชุจุงุฑ ุฌููุงูุณูู ู Bounds Test:** ุงูุฃูู ูุฎุชุจุฑ ุงูุชูุงูู ุงููุดุชุฑู ูู ูุธุงู (ุนูุงูุฉ ุชุจุงุฏููุฉ) ูุงูุซุงูู ูู ูุนุงุฏูุฉ ูุงุญุฏุฉ (ุนูุงูุฉ ุฃุญุงุฏูุฉ ุงูุงุชุฌุงู).
    - **ุงูุฌูุน ุจูู ุงุฎุชุจุงุฑุงุช ุงูุฌูู ุงูุฃูู ูุงูุซุงูู ููุจุงูู:** ูุฌุจ ุงุฎุชูุงุฑ ุงูุฌูู ุงูููุงุณุจ ุจูุงุกู ุนูู ูุฌูุฏ ุฃู ุบูุงุจ ุงูุงุนุชูุงุฏ ุงูููุทุนู (cross-sectional dependence).
    - **ุงูุฌูุน ุจูู ARDL-PMG ู ARDL-CS:** ูุฌุจ ุงุฎุชูุงุฑ ุงููููุฐุฌ ุจูุงุกู ุนูู ูุฌูุฏ ุฃู ุบูุงุจ ุงูุงุนุชูุงุฏ ุงูููุทุนู.
    """)

	# Visualization
	fig = go.Figure()
	contradictions = ["ุฌููุงูุณูู + ุชุบูุฑ ููููู", "ARDL + VAR", "ุฌููุงูุณูู + Bounds Test", "ุฌูู ุฃูู + ุซุงูู ููุจุงูู", "PMG + CS-ARDL"]
	frequency = [68, 45, 72, 53, 40]
	fig.add_trace(go.Bar(x=contradictions, y=frequency, marker_color='#c0392b'))
	fig.update_layout(title="ุชูุฑุงุฑ ุงููุชูุงูุถุงุช ุงููููุฌูุฉ ูู ุงูุฏุฑุงุณุงุช", yaxis_title="ุชูุฑุงุฑ ุงูุธููุฑ (ุชูุฏูุฑู)")
	st.plotly_chart(fig, use_container_width=True)

	st.success("""
    ### ูุตุงุฆุญ ูุชุฌูุจ ุงููุชูุงูุถุงุช
    1. **ููู ุฃุณุงุณูุงุช ุงููููุฐุฌ:** ููู ุงูุงูุชุฑุงุถุงุช ุงูุฃุณุงุณูุฉ ูุงูุดุฑูุท ุงููุงุฒูุฉ ููู ูููุฐุฌ.
    2. **ุงุฎุชูุงุฑ ุงููููุฐุฌ ุงูููุงุณุจ:** ูุฌุจ ุฃู ูุชูุงุณุจ ุงููููุฐุฌ ูุน ุทุจูุนุฉ ุงูุจูุงูุงุช ูุฃูุฏุงู ุงูุฏุฑุงุณุฉ.
    3. **ุฅุฌุฑุงุก ุงูุงุฎุชุจุงุฑุงุช ุงูุชุดุฎูุตูุฉ:** ุงูุชุญูู ูู ุตูุงุญูุฉ ุงููููุฐุฌ ูุงูุงุฎุชุจุงุฑุงุช ุงููุณุจูุฉ (ูุซู ุงูุงุนุชูุงุฏ ุงูููุทุนู).
    4. **ูุฑุงุนุงุฉ ุฎุตุงุฆุต ุงูุจูุงูุงุช:** ุงูุงูุชุจุงู ุฅูู ุฎุตุงุฆุต ุงูุจูุงูุงุช ูุซู ุงูุงุณุชูุฑุงุฑูุฉ ูุงูุชุบูุฑุงุช ุงููููููุฉ.
    5. **ุชุฌูุจ ุงูุฌูุน ุจูู ุงูููุงุฐุฌ ุงููุชุนุงุฑุถุฉ:** ูุง ุชุณุชุฎุฏู ููุงุฐุฌ ุฐุงุช ุงูุชุฑุงุถุงุช ูุชุนุงุฑุถุฉ ูู ููุณ ุงูุฏุฑุงุณุฉ ูููุณ ุงููุฏู.
    """)

# General Notes
elif choice == "ููุงุญุธุงุช ุนุงูุฉ":
	st.header("ููุงุญุธุงุช ุนุงูุฉ")

	st.markdown("""
    - ูุฐุง ุงููุฎุทุท ูุฑูุฒ ุนูู ุฃูู ุงูููุงุฐุฌ **ุงูุชูุณูุฑูุฉ** ูู ุงูุฏุฑุงุณุงุช ุงูุนุฑุจูุฉุ ูููุณุช ุงูุชูุจุคูุฉ.
    - ุงูุดุฑูุท ุงููุฐููุฑุฉ ูู ุจุตูุฉ ุนุงูุฉุ ููู ูููุฐุฌ ูู ุดุฑูุท ููุตูุฉ ูุงุฎุชุจุงุฑุงุช ุชุดุฎูุตูุฉ ุฎุงุตุฉ ุจู.
    - ุฎุงุตูุฉ ูุดุชุฑูุฉ ุจูู ูู ุงูููุงุฐุฌ ูู ุถุฑูุฑุฉ ุฃู ุชููู ุงูุจูุงูู ุฎุงููุฉ ูู ุงููุดุงูู (ุงุฑุชุจุงุท ุฐุงุชูุ ุนุฏู ุชุฌุงูุณ ุงูุชุจุงูู).
    - ุงููุนูุงุฑ ุงูุฃูู ูุงุฎุชูุงุฑ ูููุฐุฌ ูุนูู ูู ูุฏู ุชูุงูู ุฃูุฏุงูู ูุน ุฅุดูุงููุฉ ุงูุจุญุซ.
    - ูุชุนูู ุฃู ูููุฐุฌุ ูุฌุจ ุงูุชุฑููุฒ ุนูู ุฃูุฏุงููุ ุดุฑูุทูุ ูููููุฉ ุชุทุจููู ูุชูุณูุฑ ูุชุงุฆุฌู.
    """)

	# Visualization
	fig = go.Figure()
	criteria = ["ุชูุงูู ุงููููุฐุฌ ูุน ุฃูุฏุงู ุงูุฏุฑุงุณุฉ", "ูุฏุฑุฉ ุงููููุฐุฌ ุนูู ุงูุฅุฌุงุจุฉ ุนู ุฅุดูุงููุฉ ุงูุจุญุซ", "ุชุญูู ุดุฑูุท ุชุทุจูู ุงููููุฐุฌ", "ุชูุงูุฑ ุงูุจูุงูุงุช ุงููุงุฒูุฉ", "ุณูููุฉ ุงูุชูุณูุฑ ูุงูุชุญููู"]
	importance = [5, 4.8, 4.2, 3.5, 3.2]
	fig.add_trace(go.Bar(x=importance, y=criteria, orientation='h', marker=dict(color='#3a506b')))
	fig.update_layout(title="ูุนุงููุฑ ุงุฎุชูุงุฑ ุงููููุฐุฌ ุงูููุงุณู ุงูููุงุณุจ (ุญุณุจ ุงูุฃูููุฉ)", xaxis_title="ุฏุฑุฌุฉ ุงูุฃูููุฉ", yaxis=dict(autorange="reversed"))
	st.plotly_chart(fig, use_container_width=True)

	# Recommendations
	st.info("""
    ### ุชูุตูุงุช ูุงุณุชุฎุฏุงู ุงูููุงุฐุฌ ุงูููุงุณูุฉ
    1. ุถุฑูุฑุฉ ููู ุงูุฃุณุณ ุงููุธุฑูุฉ ูุงูุงูุชุฑุงุถุงุช ุงูุฃุณุงุณูุฉ ููููุงุฐุฌ ูุจู ุชุทุจูููุง.
    2. ุฃูููุฉ ุงุฎุชูุงุฑ ุงููููุฐุฌ ุงูููุงุณุจ ูููุงู ูุทุจูุนุฉ ุงูุจูุงูุงุช ูุฃูุฏุงู ุงูุฏุฑุงุณุฉ.
    3. ุถุฑูุฑุฉ ุฅุฌุฑุงุก ุงูุงุฎุชุจุงุฑุงุช ุงูุชุดุฎูุตูุฉ ููุชุญูู ูู ุตูุงุญูุฉ ุงููููุฐุฌ.
    4. ุชุฌูุจ ุงุณุชุฎุฏุงู ุงูููุงุฐุฌ ุฐุงุช ุงูุงูุชุฑุงุถุงุช ุงููุชูุงูุถุฉ ูู ููุณ ุงูุฏุฑุงุณุฉ.
    5. ุงูุงุทูุงุน ุงููุณุชูุฑ ุนูู ุงูุชุทูุฑุงุช ุงูุญุฏูุซุฉ ูู ูุฌุงู ุงูููุฐุฌุฉ ุงูููุงุณูุฉ.
    """)
	st.info("ุฅุนุฏุงุฏ: Merwan Roudane")

st.markdown("---")
st.markdown("ยฉ 2025 - ุงูููุงุฐุฌ ุงูููุงุณูุฉ ุงูุฃูุซุฑ ุดูุฑุฉ ุนุฑุจูุงู")
